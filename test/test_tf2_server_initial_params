#!/usr/bin/env python

import unittest
import rostest
import rospy
from tf2_ros import Buffer, TransformListener
from tf2_server.tf2_subtree_listener import TransformSubtreeListener
from tf2_server.srv import RequestTransformStreamRequest


test_type = None


class TestTF2SubtreeListener(unittest.TestCase):
    def test_basic(self):

        buffer = Buffer()
        listener = TransformListener(buffer)
        rospy.loginfo(listener.tf_sub.resolved_name)

        rospy.sleep(rospy.Duration(1))

        if test_type == "odom":
            self.assertTrue( buffer.can_transform("odom", "base_link", rospy.Time(0)))
            self.assertFalse(buffer.can_transform("odom", "left_track", rospy.Time(0)))
            self.assertFalse(buffer.can_transform("odom", "front_left_flipper", rospy.Time(0)))
            self.assertFalse(buffer.can_transform("odom", "front_left_flipper_endpoint", rospy.Time(0)))
            self.assertFalse(buffer.can_transform("odom", "right_track", rospy.Time(0)))

            self.assertFalse(buffer.can_transform("base_link", "left_track", rospy.Time(0)))
            self.assertFalse(buffer.can_transform("base_link", "front_left_flipper", rospy.Time(0)))
            self.assertFalse(buffer.can_transform("base_link", "front_left_flipper_endpoint", rospy.Time(0)))
            self.assertFalse(buffer.can_transform("left_track", "front_left_flipper", rospy.Time(0)))
            self.assertFalse(buffer.can_transform("left_track", "front_left_flipper_endpoint", rospy.Time(0)))
            self.assertFalse(buffer.can_transform("front_left_flipper", "front_left_flipper_endpoint", rospy.Time(0)))

            self.assertFalse(buffer.can_transform("base_link", "right_track", rospy.Time(0)))
            self.assertFalse(buffer.can_transform("base_link", "front_right_flipper", rospy.Time(0)))
        elif test_type == "body":
            self.assertFalse(buffer.can_transform("odom", "base_link", rospy.Time(0)))
            self.assertFalse(buffer.can_transform("odom", "left_track", rospy.Time(0)))
            self.assertFalse(buffer.can_transform("odom", "front_left_flipper", rospy.Time(0)))
            self.assertFalse(buffer.can_transform("odom", "front_left_flipper_endpoint", rospy.Time(0)))
            self.assertFalse(buffer.can_transform("odom", "right_track", rospy.Time(0)))

            self.assertTrue(buffer.can_transform("base_link", "left_track", rospy.Time(0)))
            self.assertTrue(buffer.can_transform("base_link", "front_left_flipper", rospy.Time(0)))
            self.assertTrue(buffer.can_transform("base_link", "front_left_flipper_endpoint", rospy.Time(0)))
            self.assertTrue(buffer.can_transform("left_track", "front_left_flipper", rospy.Time(0)))
            self.assertTrue(buffer.can_transform("left_track", "front_left_flipper_endpoint", rospy.Time(0)))
            self.assertTrue(buffer.can_transform("front_left_flipper", "front_left_flipper_endpoint", rospy.Time(0)))

            self.assertTrue(buffer.can_transform("base_link", "right_track", rospy.Time(0)))
            self.assertTrue(buffer.can_transform("base_link", "front_right_flipper", rospy.Time(0)))


if __name__ == '__main__':
    rospy.init_node("test_tf2_subtree_listener_py")
    test_type = rospy.get_param("~test_type")
    rostest.run("tf2_server", "test_tf2_subtree_listener_py", TestTF2SubtreeListener)
