<launch>
    <param name="/use_sim_time" value="false" />

    <include file="$(dirname)/tf_tree.launch" />

    <node name="tf2_buffer_server" pkg="tf2_server" type="tf2_server_node">
        <rosparam>
            streams:
              odom:
                parent_frame: 'odom'
                child_frames: [ 'base_link' ]
                intermediate_frames: False
                publication_period: 0.1
              body:
                parent_frame: 'base_link'
                child_frames: []
                intermediate_frames: True
                publication_period: 0.1
                publisher_queue_size: 11
              update:
                parent_frame: 'map'
                child_frames: []
                intermediate_frames: True
                publication_period: 0.1
                allow_transforms_update: True
        </rosparam>
    </node>

    <test test-name="test_tf2_server_initial_params_odom" pkg="tf2_server" type="test_tf2_server_initial_params">
        <remap from="tf2_server" to="tf2_buffer_server" />
        <remap from="/tf" to="/tf2_buffer_server/odom" />
        <remap from="/tf_static" to="/tf2_buffer_server/odom/static" />
        <param name="test_type" value="odom" />
    </test>

    <test test-name="test_tf2_server_initial_params_body" pkg="tf2_server" type="test_tf2_server_initial_params">
        <remap from="tf2_server" to="tf2_buffer_server" />
        <remap from="/tf" to="/tf2_buffer_server/body" />
        <remap from="/tf_static" to="/tf2_buffer_server/body/static" />
        <param name="test_type" value="body" />
    </test>

    <!-- For the update test, we need to access the original tf topics to be able to publish to
         them... so we do the remapping manually in the test code. -->
    <test test-name="test_tf2_server_initial_params_update" pkg="tf2_server" type="test_tf2_server_initial_params">
        <remap from="tf2_server" to="tf2_buffer_server" />
        <param name="test_type" value="update" />
    </test>
</launch>